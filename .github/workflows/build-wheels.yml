name: Build Wheels

on:
  push:
    branches: [ main, develop, better-doc ]
    tags: [ v* ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for Linux ARM builds)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libeigen3-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install eigen

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Note: Eigen3 will be installed inside cibuildwheel containers
          echo "Eigen3 will be installed during wheel building"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.2
        env:
          # Build for Python 3.8-3.12
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          
          # Skip 32-bit builds, PyPy, and musllinux
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_* pp*"
          
          # Install system dependencies before building
          CIBW_BEFORE_ALL_LINUX: |
            # Install Eigen3 for manylinux (CentOS/RHEL based)
            echo "Installing Eigen3 on Linux..."
            yum update -y
            yum install -y epel-release
            yum install -y eigen3-devel || {
              # Fallback: install from source if package not available
              echo "Package not found, installing Eigen3 from source..."
              yum install -y wget tar
              cd /tmp
              wget -q --timeout=30 https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz
              tar xzf eigen-3.4.0.tar.gz
              mkdir -p /usr/include/eigen3
              cp -r eigen-3.4.0/Eigen /usr/include/eigen3/
              cp -r eigen-3.4.0/unsupported /usr/include/eigen3/
              echo "Eigen3 installed to /usr/include/eigen3"
            }
            echo "Verifying Eigen3 installation..."
            ls -la /usr/include/eigen3/ || ls -la /usr/include/eigen3-devel/ || echo "Eigen3 location unknown but should be available"
          
          CIBW_BEFORE_ALL_WINDOWS: >
            powershell -Command "
            Write-Host 'Installing Eigen3 from source on Windows...';
            Invoke-WebRequest -Uri 'https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip' -OutFile 'eigen.zip';
            Expand-Archive -Path 'eigen.zip' -DestinationPath 'C:\temp' -Force;
            New-Item -Path 'C:\eigen3' -ItemType Directory -Force;
            Copy-Item -Path 'C:\temp\eigen-3.4.0\Eigen' -Destination 'C:\eigen3\Eigen' -Recurse -Force;
            Copy-Item -Path 'C:\temp\eigen-3.4.0\unsupported' -Destination 'C:\eigen3\unsupported' -Recurse -Force;
            Write-Host 'Eigen3 installed to C:\eigen3'
            "
            
          CIBW_BEFORE_ALL_MACOS: |
            brew install eigen
            
          # Set environment variables for builds
          CIBW_ENVIRONMENT_WINDOWS: >
            EIGEN3_INCLUDE_DIR="C:/eigen3"
            
          # Test the built wheels
          CIBW_TEST_REQUIRES: pytest numpy scipy
          CIBW_TEST_COMMAND: "python -c \"import trendfilter; print('Import successful'); import numpy as np; tf = trendfilter.TrendFilter(); print('Basic functionality working')\""
          
          # Skip testing on emulated architectures (too slow)
          CIBW_TEST_SKIP: "*-*linux_{aarch64,ppc64le,s390x} *-*linux_aarch64"

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist
        run: python -m build --sdist

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  test_wheels:
    name: Test wheels on ${{ matrix.os }} Python ${{ matrix.python-version }}
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install Eigen3 for potential source fallback
          brew install eigen

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheels/

      - name: Debug platform info
        run: |
          echo "Platform information:"
          python -c "import platform; print(f'Platform: {platform.platform()}'); print(f'Machine: {platform.machine()}'); print(f'Architecture: {platform.architecture()}'); print(f'System: {platform.system()}'); print(f'Release: {platform.release()}')"
          echo "Available wheels:"
          python -c "import os; import glob; wheels = glob.glob('./wheels/*.whl'); print('\\n'.join(wheels) if wheels else 'No wheels found'); [print(f'  {w} ({os.path.getsize(w)} bytes)') for w in wheels]"
          echo "Pip debug info:"
          python -m pip debug --verbose

      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          # Find and install the wheel for current Python version
          python -c "
          import sys
          import glob
          import subprocess
          import os
          
          py_tag = f'cp{sys.version_info.major}{sys.version_info.minor}'
          wheels = glob.glob('./wheels/*' + py_tag + '*.whl')
          
          if wheels:
              wheel = wheels[0]
              print(f'Installing wheel: {wheel}')
              try:
                  # First try with force-reinstall and no-deps
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--force-reinstall', '--no-deps', '--disable-pip-version-check', '--no-cache-dir', wheel], check=True)
                  print('Wheel installed successfully')
              except subprocess.CalledProcessError as e:
                  print(f'Failed to install wheel: {e}')
                  print('Trying to install with --force-reinstall only...')
                  try:
                      subprocess.run([sys.executable, '-m', 'pip', 'install', '--force-reinstall', '--disable-pip-version-check', '--no-cache-dir', wheel], check=True)
                      print('Wheel installed with --force-reinstall')
                  except subprocess.CalledProcessError as e2:
                      print(f'Still failed: {e2}')
                      print('Falling back to source installation...')
                      # Install from source as fallback
                      subprocess.run([sys.executable, '-m', 'pip', 'install', '.'], check=True)
                      # Skip dependency installation for source install (already handled by setup.py)
                      sys.exit(0)
              
              # Install dependencies separately (only reached if wheel install succeeded)
              subprocess.run([sys.executable, '-m', 'pip', 'install', 'numpy>=1.18.0', 'scipy>=1.5.0'], check=True)
          else:
              print(f'No wheel found for Python {py_tag}')
              print('Available wheels:')
              for w in glob.glob('./wheels/*.whl'):
                  print(f'  {w}')
              print('Installing from source instead...')
              subprocess.run([sys.executable, '-m', 'pip', 'install', '.'], check=True)
          "

      - name: Test installation
        run: |
          python -c "
          import trendfilter
          import numpy as np
          
          # Test basic functionality
          print('TrendFilter import successful')
          
          # Test basic functionality (uses Python fallback if C++ not available)
          tf = trendfilter.TrendFilter(order=1, lambda_reg=0.1)
          y = np.random.randn(50)
          tf.fit(y)
          y_pred = tf.predict()
          
          print(f'Basic functionality working: input {y.shape} -> output {y_pred.shape}')
          
          # Test CV functionality
          cv_tf = trendfilter.CVTrendFilter(order=1)
          cv_tf.fit(y)
          y_cv_pred = cv_tf.predict()
          
          print(f'CV functionality working: input {y.shape} -> output {y_cv_pred.shape}')
          print('All tests passed!')
          "
